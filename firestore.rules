

// firestore.rules
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isValidEmail(email) {
      return email.matches('^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');
    }
    
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) &&
        hasRequiredFields(['email', 'name', 'createdAt']) &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50;
      allow update: if isOwner(userId) &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email', 'createdAt']));
      allow delete: if false; // Users cannot delete their accounts directly
    }
    
    // Posts collection
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid &&
        hasRequiredFields(['userId', 'title', 'description', 'category', 'createdAt']) &&
        request.resource.data.title.size() >= 3 &&
        request.resource.data.title.size() <= 100 &&
        request.resource.data.description.size() >= 10 &&
        request.resource.data.description.size() <= 1000;
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId', 'createdAt']);
      allow delete: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
    }
    
    // Reels collection
    match /reels/{reelId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
    }
    
    // Messages collection
    match /messages/{messageId} {
      allow read: if isSignedIn() &&
        request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() &&
        request.auth.uid == request.resource.data.senderId &&
        request.auth.uid in request.resource.data.participantIds;
      allow update: if false; // Messages cannot be edited
      allow delete: if false; // Messages cannot be deleted
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isSignedIn() &&
        request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() &&
        request.auth.uid in request.resource.data.participantIds &&
        request.resource.data.participantIds.size() == 2;
      allow update: if isSignedIn() &&
        request.auth.uid in resource.data.participantIds &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['participantIds']);
      allow delete: if false;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.reviewerId == request.auth.uid &&
        request.resource.data.reviewerId != request.resource.data.reviewedUserId &&
        request.resource.data.rating >= 1 &&
        request.resource.data.rating <= 5;
      allow update: if isSignedIn() &&
        resource.data.reviewerId == request.auth.uid &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['reviewerId', 'reviewedUserId', 'createdAt']);
      allow delete: if false;
    }
    
    // Status collection
    match /statuses/{statusId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() &&
        resource.data.userId == request.auth.uid;
    }
  }
}
