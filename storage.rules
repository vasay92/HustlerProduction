

// storage.rules
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isImageFile() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isVideoFile() {
      return request.resource.contentType.matches('video/.*');
    }
    
    function isValidFileSize() {
      return request.resource.size <= 10 * 1024 * 1024; // 10MB for images
    }
    
    function isValidVideoSize() {
      return request.resource.size <= 100 * 1024 * 1024; // 100MB for videos
    }
    
    // Profile images
    match /profiles/{userId}/{allPaths=**} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) &&
        isImageFile() &&
        isValidFileSize();
    }
    
    // Post images
    match /posts/{userId}/{allPaths=**} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) &&
        isImageFile() &&
        isValidFileSize();
    }
    
    // Reel videos
    match /reels/{userId}/{allPaths=**} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) &&
        (isVideoFile() || isImageFile()) &&
        isValidVideoSize();
    }
    
    // Status images
    match /statuses/{userId}/{allPaths=**} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) &&
        isImageFile() &&
        isValidFileSize();
    }
    
    // Portfolio images
    match /portfolio/{userId}/{allPaths=**} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId) &&
        isImageFile() &&
        isValidFileSize();
    }
  }
}
